generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  tenants   Tenant[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tenant {
  id               String    @id @default(cuid())
  name             String
  shopifyDomain    String    @unique
  shopifyToken     String?
  userId           String
  user             User      @relation(fields: [userId], references: [id])
  customers        Customer[]
  products         Product[]
  orders           Order[]
  webhooks         Webhook[]
  events           Event[]
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@map("tenants")
}

model Customer {
  id          String   @id @default(cuid())
  shopifyId   String
  email       String
  firstName   String?
  lastName    String?
  totalSpent  Float    @default(0)
  ordersCount Int      @default(0)
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  orders      Order[]
  events      Event[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([shopifyId, tenantId])
  @@map("customers")
}

model Product {
  id          String      @id @default(cuid())
  shopifyId   String
  title       String
  price       Float
  tenantId    String
  tenant      Tenant      @relation(fields: [tenantId], references: [id])
  orderItems  OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@unique([shopifyId, tenantId])
  @@map("products")
}

model Order {
  id          String      @id @default(cuid())
  shopifyId   String
  orderNumber String
  totalPrice  Float
  customerId  String
  customer    Customer    @relation(fields: [customerId], references: [id])
  tenantId    String
  tenant      Tenant      @relation(fields: [tenantId], references: [id])
  items       OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderDate   DateTime

  @@unique([shopifyId, tenantId])
  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  quantity  Int
  price     Float
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  
  @@map("order_items")
}

model Webhook {
  id          String   @id @default(cuid())
  topic       String
  address     String
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([topic, tenantId])
  @@map("webhooks")
}

model Event {
  id          String   @id @default(cuid())
  type        String
  customerId  String?
  customer    Customer? @relation(fields: [customerId], references: [id])
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  data        Json
  createdAt   DateTime @default(now())
  
  @@map("events")
}